package com.pay10.pg.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.owasp.esapi.ESAPI;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.fss.plugin.iPayPipe;
import com.opensymphony.xwork2.Action;
import com.pay10.commons.api.TransactionControllerServiceProvider;
import com.pay10.commons.dao.FieldsDao;
import com.pay10.commons.user.User;
import com.pay10.commons.user.UserDao;
import com.pay10.commons.util.AcquirerType;
import com.pay10.commons.util.Constants;
import com.pay10.commons.util.FieldType;
import com.pay10.commons.util.Fields;
import com.pay10.commons.util.PropertiesManager;
import com.pay10.pg.action.service.RetryTransactionProcessor;
import com.pay10.pg.core.util.Processor;
import com.pay10.pg.core.util.ResponseCreator;
import com.pay10.pg.core.util.SbiUtil;

public class SbiResponseAction extends AbstractSecureAction implements ServletRequestAware {

	private static Logger logger = LoggerFactory.getLogger(SbiResponseAction.class.getName());
	private static final long serialVersionUID = 6155942791032490231L;

	@Autowired
	TransactionControllerServiceProvider transactionControllerServiceProvider;

	@Autowired
	private ResponseCreator responseCreator;
	
	@Autowired
	@Qualifier("updateProcessor")
	private Processor updateProcessor;

	@Autowired
	private UserDao userDao;

	@Autowired
	private FieldsDao fieldsDao;

	@Autowired
	private RetryTransactionProcessor retryTransactionProcessor;

	@Autowired
	private SbiUtil sbiUtil;

	private Fields responseMap = null;
	private HttpServletRequest httpRequest;

	public void setServletRequest(HttpServletRequest hReq) {
		this.httpRequest = hReq;
	}

	public SbiResponseAction() {
	}

	public String execute() {
		try {

			Map<String, String[]> fieldMapObj = httpRequest.getParameterMap();
			Map<String, String> requestMap = new HashMap<String, String>();

			logger.info("fieldMapObj >>>>> "+fieldMapObj.toString());
			for (Entry<String, String[]> entry : fieldMapObj.entrySet()) {
				try {
					requestMap.put(entry.getKey(), ((String[]) entry.getValue())[0]);

				} catch (ClassCastException classCastException) {
					logger.error("Exception", classCastException);
				}
			}
			// Log all entries from sessionMap
			if (!sessionMap.isEmpty()) {
				StringBuilder sb = new StringBuilder();
				Iterator itr = sessionMap.entrySet().iterator();
				while (itr.hasNext()) {

					Entry obj = (Entry) itr.next();
					sb.append(obj.getKey() + " = " + obj.getValue() + " ~");
				}
				//logger.info("sessionMap values >>> " + sb.toString());
			} else {
				logger.info("Session Map is empty");
			}

			//logger.info("sessionMap >>>>>>>>>>>>>> "+sessionMap);
			
			Fields fields = new Fields();
			Object fieldsObj = sessionMap.get("FIELDS");
			if (null != fieldsObj) {
				fields.put((Fields) fieldsObj);
			}

			//code added by sonu 
			if ("CC".equalsIgnoreCase(fields.get(FieldType.PAYMENT_TYPE.getName()))
					|| "DC".equalsIgnoreCase(fields.get(FieldType.PAYMENT_TYPE.getName()))) {

				logger.info("Response Received For SBI Card ");
				String merchantId = fields.get(FieldType.MERCHANT_ID.getName());
				logger.info("Response Received SBI Card For Merchant Id :: "+merchantId);

				iPayPipe pipe = new iPayPipe();
				
				String resourcePath = PropertiesManager.propertiesMap.get(merchantId+"_SbiResourcePath");
				String keystorePath = PropertiesManager.propertiesMap.get(merchantId+"_SbikeystorePath");
				String aliasName = PropertiesManager.propertiesMap.get(merchantId+"_SbiAliasName"); 

				logger.info("resourcePath "+resourcePath + " keystorePath "+keystorePath + " aliasName "+aliasName);
				
				pipe.setResourcePath(resourcePath);
				pipe.setKeystorePath(keystorePath);
				pipe.setAlias(aliasName);

				logger.info("Response Received at SbiResponseAction");
				// The method to be called to decrypt the response sent by Payment Gateway
				int result = pipe.parseEncryptedResult(httpRequest.getParameter("trandata"));

				logger.info("Response Received at SbiResponseAction Result is : " + result);
				String Result = "";
				String error = "";
				String trackId = null;
				if (null == httpRequest.getParameter("ErrorText") && result == 0) {

					Result = pipe.getResult(); // gives the value in the tag.
					String PostDate = pipe.getDate(); // contains post date
					String refNum = pipe.getRef(); // contains RRN no generated by PG
					trackId = pipe.getTrackId(); // contains merchant track ID
					String tranId = pipe.getTransId(); // contains PG Transaction ID
					String amt = pipe.getAmt(); // contains transaction amount
					String paymentId = pipe.getPaymentId(); // contains payment ID
					String auth = pipe.getAuth(); // contains Auth code
					String errorText = pipe.getError_text(); // contains get Error Text
					error = pipe.getError(); // contains get Error Text

					logger.info("Result : " + Result + " PostDate : " + PostDate + " refNum : " + refNum + " trackId : "+ trackId);
					logger.info("tranId : " + tranId + " amt : " + amt + " paymentId : " + paymentId + " auth : " + auth);
					logger.info("errorText : " + errorText + " error : " + error);
					//added by RR for ACQ=0 bug fix
					fields.put(FieldType.ACQ_ID.getName(), refNum);
				} else if (httpRequest.getParameter("ErrorText") != null) {
					logger.info(httpRequest.getParameter("ErrorText"));
					error = pipe.getError();
				} else if (result != 0) {
					logger.info(pipe.getError());
					error = pipe.getError();
				}

				String ipPgRefNum = null;
				if(!StringUtils.isBlank(trackId)) {
					ipPgRefNum = trackId;
				}else {
					ipPgRefNum = fields.get(FieldType.PG_REF_NUM.getName());
				}
				
				if(!StringUtils.isBlank(ipPgRefNum)) {
					fields = fieldsDao.getPreviousForPgRefNum(ipPgRefNum);
					String internalRequestFields = fields.get(FieldType.INTERNAL_REQUEST_FIELDS.getName());
					String[] paramaters = internalRequestFields.split("~");
					Map<String, String> paramMap = new HashMap<String, String>();
					
					//db
					for (String param : paramaters) {				    
						String[] parameterPair = param.split("=");
						if (parameterPair.length > 1 ) {
						    if(parameterPair[0].trim().equalsIgnoreCase("RETURN_URL")) {
						        String[] tempArrayRetURL=param.split("=",2);
						        logger.info(" Split_RETURN_URL : "+tempArrayRetURL[0].trim()+"  :     "+tempArrayRetURL[1].trim());
						        paramMap.put(tempArrayRetURL[0].trim(), tempArrayRetURL[1].trim());
						    }else {
						        paramMap.put(parameterPair[0].trim(), parameterPair[1].trim());    
						    }
							
						}
					}
					/*
					 * for (String param : paramaters) { String[] parameterPair = param.split("=");
					 * if (parameterPair.length > 1) { paramMap.put(parameterPair[0].trim(),
					 * parameterPair[1].trim()); } }
					 */

					if(StringUtils.isBlank(fields.get(FieldType.INTERNAL_CUST_IP.getName()))) {
						String ipAddress = fieldsDao.getIpFromSTB(fields.get(FieldType.OID.getName()));
						
						if(StringUtils.isBlank(ipAddress)) {
							ipAddress = fieldsDao.getIPFromInitiateRequest(fields.get(FieldType.OID.getName()));
						}
						
						if(StringUtils.isBlank(ipAddress)) {
							ipAddress = fieldsDao.getIpFromSTBUsingPgRefNum(ipPgRefNum);
						}
						
						if(StringUtils.isBlank(ipAddress)) {
							ipAddress="0.0.0.1";
						}
						
						fields.put(FieldType.INTERNAL_CUST_IP.getName(), ipAddress);
						logger.info("cust ipaddress in SBI-CARD Acquirer = {}", ipAddress);
					}
					
					fields.put(FieldType.RETURN_URL.getName(), paramMap.get(FieldType.RETURN_URL.getName()));
					sessionMap.put(FieldType.RETURN_URL.getName(), paramMap.get(FieldType.RETURN_URL.getName()));
				}
				logger.info("Result in SBI_RESPONSE_ACTION...{}",Result);
				logger.info("Result in SBI_RESPONSE_ACTION... error{}",error);
				if (Result.isEmpty() || Result.equalsIgnoreCase("")) {
					fields.put(FieldType.RESPONSE_MESSAGE.getName(), error);
					fields.put(FieldType.PG_TXN_MESSAGE.getName(), error);
					fields.put(FieldType.STATUS.getName(), "Failed");
					fields.put(FieldType.RESPONSE_CODE.getName(), "022");
				} else if (Result.equalsIgnoreCase("CAPTURED")) {
					fields.put(FieldType.STATUS.getName(), "Captured");
				} else if (!Result.equalsIgnoreCase("CAPTURED")) {
					fields.put(FieldType.RESPONSE_MESSAGE.getName(), error);
					fields.put(FieldType.PG_TXN_MESSAGE.getName(), error);
					fields.put(FieldType.STATUS.getName(), "Failed");
					fields.put(FieldType.RESPONSE_CODE.getName(), "022");
				}
				
				
				logger.info("Fields in SBI_RESPONSE_ACTION after error... fields{}",fields.getFieldsAsString());
				
				fields.put(FieldType.MERCHANT_ID.getName(), merchantId);
				
				/*
				 * logger.info("Get IpAddress using PgRefNum :: "+ipPgRefNum); String ipAddress
				 * = fieldsDao.getIpFromSTBUsingPgRefNum(ipPgRefNum);
				 * if(StringUtils.isBlank(ipAddress)) {
				 * ipAddress=fieldsDao.getIPFromInitiateRequest(fields.get(FieldType.OID.getName
				 * ())); } logger.info(" cust ipaddress in SBI-Card Acquirer = {}", ipAddress);
				 * if(StringUtils.isBlank(ipAddress)) { ipAddress="0.0.0.1"; }
				 * fields.put(FieldType.INTERNAL_CUST_IP.getName(), ipAddress);
				 */
				
				
				fields.put(FieldType.INTERNAL_ORIG_TXN_TYPE.getName(), fields.get(FieldType.TXNTYPE.getName()));
				
				fields.logAllFieldsUsingMasking("Updated 3DS Recieved Map TxnType = " + fields.get(FieldType.TXNTYPE.getName())
						+ " " + "Txn id = " + fields.get(FieldType.TXN_ID.getName()));
				//fields.put(FieldType.ACQUIRER_TYPE.getName(), AcquirerType.SBI.getCode());
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.INTERNAL_ORIG_TXN_TYPE.getName()))) {
					fields.put(FieldType.TXNTYPE.getName(),
							(String) sessionMap.get(FieldType.INTERNAL_ORIG_TXN_TYPE.getName()));
				}
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.INTERNAL_CUST_IP.getName()))) {
					fields.put((FieldType.INTERNAL_CUST_IP.getName()),
							(String) sessionMap.get(FieldType.INTERNAL_CUST_IP.getName()));
				}
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()))) {
					fields.put((FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()),
							(String) sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()));
				}
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.PAYMENTS_REGION.getName()))) {
					fields.put((FieldType.PAYMENTS_REGION.getName()),
							(String) sessionMap.get(FieldType.PAYMENTS_REGION.getName()));
				}
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.CARD_HOLDER_TYPE.getName()))) {
					fields.put((FieldType.CARD_HOLDER_TYPE.getName()),
							(String) sessionMap.get(FieldType.CARD_HOLDER_TYPE.getName()));
				}
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.OID.getName()))) {
					fields.put((FieldType.OID.getName()), (String) sessionMap.get(FieldType.OID.getName()));

				}
				
				fields.put(FieldType.INTERNAL_VALIDATE_HASH_YN.getName(), "N");

				Map<String, String> response = transactionControllerServiceProvider.transact(fields,
						Constants.TXN_WS_SBI_PROCESSOR.getValue());
				responseMap = new Fields(response);

				String pgFlag = (String) sessionMap.get(FieldType.INTERNAL_IRCTC_YN.getName());
				if (StringUtils.isNotBlank(pgFlag)) {
					responseMap.put(FieldType.INTERNAL_IRCTC_YN.getName(), pgFlag);
				}
				responseMap.remove(FieldType.HASH.getName());
				responseMap.remove(FieldType.TXN_KEY.getName());
				responseMap.remove(FieldType.ACQUIRER_TYPE.getName());
				responseMap.put(FieldType.IS_INTERNAL_REQUEST.getName(), "N");
				responseCreator.create(responseMap);
				responseCreator.ResponsePost(responseMap);
				
			} else {

				//logger.info("trandata " + requestMap.get("trandata"));
				logger.info("SBI response received : "+responseMap);
				String encdata = requestMap.get("encdata");
				logger.info("Encrypted Response received from SBI: " + encdata);
				String decrytedResponse = sbiUtil.decrypt(encdata);
				logger.info("decrypted Response received from SBI: " + decrytedResponse);
				String[] resparam = decrytedResponse.split("\\|");
				Map<String, String> resParamMap = new HashMap<String, String>();
				for (String param : resparam) {
					String[] parameterPair = param.split("=");
					if (parameterPair.length > 1) {
						resParamMap.put(parameterPair[0].trim(), parameterPair[1].trim());
					}
				}
				// String receivedChecksum = resParamMap.get("checkSum");

				logger.info("<<<<<<<<<<<< resParamMap >>>>>>>>>>>>>>> "+resParamMap.toString());
				String Status_desc = resParamMap.get("Status_desc");
				
				// Check if fields is empty


				if (StringUtils.isBlank(fields.get(FieldType.PAY_ID.getName()))) {
					logger.info("FIELDS is blank in session Map, getting data from DB ::");

					//fields = fieldsDao.getPreviousForPgRefNum(resParamMap.get(FieldType.PG_REF_NUM.getName()));
//					fields = fieldsDao.getPreviousForPgRefNum(resParamMap.get("Ref_no"));
				//	fields = fieldsDao.getPreviousForPgRefNum(resParamMap.get(FieldType.PG_REF_NUM.getName()));
					fields = fieldsDao.getPreviousForPgRefNumForSbiDelayedReponse(resParamMap.get("Ref_no"));
					//fields = fieldsDao.getPreviousForPgRefNum("1101611105165653");
					String internalRequestFields = fields.get(FieldType.INTERNAL_REQUEST_FIELDS.getName());
					String[] paramaters = internalRequestFields.split("~");
					Map<String, String> paramMap = new HashMap<String, String>();
					for (String param : paramaters) {
						String[] parameterPair = param.split("=");
						if (parameterPair.length > 1) {
							paramMap.put(parameterPair[0].trim(), parameterPair[1].trim());
						}
					}

					String ipAddress = fieldsDao.getIpFromSTB(fields.get(FieldType.OID.getName()));
					if(StringUtils.isBlank(ipAddress)) {
						ipAddress=fieldsDao.getIPFromInitiateRequest(fields.get(FieldType.OID.getName()));
					}
					fields.put(FieldType.INTERNAL_CUST_IP.getName(), ipAddress);
					logger.info(" cust ipaddress in SBI-NB Acquirer = {}", ipAddress);
					
					fields.put(FieldType.RETURN_URL.getName(), paramMap.get(FieldType.RETURN_URL.getName()));
					sessionMap.put(FieldType.RETURN_URL.getName(), paramMap.get(FieldType.RETURN_URL.getName()));
					if (StringUtils.isNotBlank(paramMap.get(FieldType.INTERNAL_CUST_IP.getName()))) {
						fields.put((FieldType.INTERNAL_CUST_IP.getName()),
								paramMap.get(FieldType.INTERNAL_CUST_IP.getName()));
					}
					if (StringUtils.isNotBlank(paramMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()))) {
						fields.put((FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()),
								paramMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()));
					}
				} else {
					fields = fieldsDao.getPreviousForPgRefNum(resParamMap.get("Ref_no"));
					
					String internalRequestFields = fields.get(FieldType.INTERNAL_REQUEST_FIELDS.getName());
					String[] paramaters = internalRequestFields.split("~");
					Map<String, String> paramMap = new HashMap<String, String>();
					for (String param : paramaters) {
						String[] parameterPair = param.split("=");
						if (parameterPair.length > 1) {
							paramMap.put(parameterPair[0].trim(), parameterPair[1].trim());
						}
					}
					
					if(StringUtils.isBlank(fields.get(FieldType.INTERNAL_CUST_IP.getName()))) {
						String ipAddress = fieldsDao.getIpFromSTB(fields.get(FieldType.OID.getName()));
						
						if(StringUtils.isBlank(ipAddress)) {
							ipAddress = fieldsDao.getIPFromInitiateRequest(fields.get(FieldType.OID.getName()));
						}
						
						fields.put(FieldType.INTERNAL_CUST_IP.getName(), ipAddress);
						logger.info(" cust ipaddress in SBI-NB Acquirer = {}", ipAddress);
					}
					
					fields.put(FieldType.RETURN_URL.getName(), paramMap.get(FieldType.RETURN_URL.getName()));
					sessionMap.put(FieldType.RETURN_URL.getName(), paramMap.get(FieldType.RETURN_URL.getName()));
				}

				fields.put(FieldType.SBI_RESPONSE_FIELD.getName(), decrytedResponse);
				fields.logAllFields("Updated 3DS Recieved Map TxnType = " + fields.get(FieldType.TXNTYPE.getName())
						+ " " + "Txn id = " + fields.get(FieldType.TXN_ID.getName()));
				//fields.put(FieldType.ACQUIRER_TYPE.getName(), AcquirerType.SBI.getCode());

				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.INTERNAL_ORIG_TXN_TYPE.getName()))) {
					fields.put(FieldType.TXNTYPE.getName(), (String) sessionMap.get(FieldType.INTERNAL_ORIG_TXN_TYPE.getName()));
				}
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.INTERNAL_CUST_IP.getName()))) {
					fields.put((FieldType.INTERNAL_CUST_IP.getName()), (String) sessionMap.get(FieldType.INTERNAL_CUST_IP.getName()));
				}
				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()))) {
					fields.put((FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()), (String) sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()));
				}

				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.PAYMENTS_REGION.getName()))) {
					fields.put((FieldType.PAYMENTS_REGION.getName()), (String) sessionMap.get(FieldType.PAYMENTS_REGION.getName()));
				}

				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.CARD_HOLDER_TYPE.getName()))) {
					fields.put((FieldType.CARD_HOLDER_TYPE.getName()), (String) sessionMap.get(FieldType.CARD_HOLDER_TYPE.getName()));
				}

				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.OID.getName()))) {
					fields.put((FieldType.OID.getName()), (String) sessionMap.get(FieldType.OID.getName()));

				}

				fields.put(FieldType.INTERNAL_VALIDATE_HASH_YN.getName(), "N");
				fields.put(FieldType.RESPONSE_MESSAGE.getName(), Status_desc);

				Map<String, String> response = transactionControllerServiceProvider.transact(fields,
						Constants.TXN_WS_SBI_PROCESSOR.getValue());
				responseMap = new Fields(response);

				String pgFlag = (String) sessionMap.get(FieldType.INTERNAL_IRCTC_YN.getName());
				if (StringUtils.isNotBlank(pgFlag)) {
					responseMap.put(FieldType.INTERNAL_IRCTC_YN.getName(), pgFlag);
				}

				// Fetch user for retryTransaction ,SendEmailer and SmsSenser

				User user = userDao.getUserClass(responseMap.get(FieldType.PAY_ID.getName()));

				/*
				 * // Retry Transaction Block Start if
				 * (!responseMap.get(FieldType.RESPONSE_CODE.getName()).equals(ErrorType.SUCCESS
				 * .getCode())) {
				 * 
				 * if (retryTransactionProcessor.retryTransaction(responseMap, sessionMap,
				 * user)) { addActionMessage(CrmFieldConstants.RETRY_TRANSACTION.getValue());
				 * sessionMap.remove(FieldType.SBI_FINAL_REQUEST.getName());
				 * sessionMap.remove(FieldType.SBI_RESPONSE_FIELD.getName());
				 * sessionMap.remove(FieldType.ACQUIRER_TYPE.getName());
				 * sessionMap.put(FieldType.RETRY_FLAG.getName(), "Y");
				 * responseMap.put(FieldType.RETRY_URL.getName(),
				 * PropertiesManager.propertiesMap.get(FieldType.RETRY_URL.getName()));
				 * responseCreator.ResponsePost(responseMap); return Action.NONE; }
				 * 
				 * }
				 */

				/*
				 * Object previousFields = sessionMap.get(Constants.FIELDS.getValue()); Fields
				 * sessionFields = null; if (null != previousFields) { sessionFields = (Fields)
				 * previousFields; } else { // TODO: Handle } sessionFields.put(responseMap);
				 */
				// Retry Transaction Block End
				// Sending Email for Transaction Status to merchant TODO...
				/*
				 * String countryCode = (String)
				 * sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName());
				 * emailBuilder.postMan(responseMap, countryCode, user);
				 */

				Fields Fields = new Fields();
				Fields.put(FieldType.ORDER_ID.getName(), fields.get(FieldType.ORDER_ID.getName()));
				Fields.put(FieldType.STATUS.getName(), fields.get(FieldType.STATUS.getName()));
				Fields.put(FieldType.MOP_TYPE.getName(), fields.get(FieldType.MOP_TYPE.getName()));

				if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.RETURN_URL.getName()))) {
					fields.put((FieldType.RETURN_URL.getName()), (String) sessionMap.get(FieldType.RETURN_URL.getName()));
				}

				String cardIssuerBank = (String) sessionMap.get(FieldType.INTERNAL_CARD_ISSUER_BANK.getName());
				String cardIssuerCountry = (String) sessionMap.get(FieldType.INTERNAL_CARD_ISSUER_COUNTRY.getName());
				if (StringUtils.isNotBlank(cardIssuerBank)) {
					responseMap.put(FieldType.CARD_ISSUER_BANK.getName(), cardIssuerBank);
				}
				if (StringUtils.isNotBlank(cardIssuerCountry)) {
					responseMap.put(FieldType.CARD_ISSUER_COUNTRY.getName(), cardIssuerCountry);
				}

				responseMap.put(FieldType.INTERNAL_SHOPIFY_YN.getName(), (String) sessionMap.get(FieldType.INTERNAL_SHOPIFY_YN.getName()));
				responseMap.put(FieldType.IS_MERCHANT_HOSTED.getName(), (String) sessionMap.get(FieldType.IS_MERCHANT_HOSTED.getName()));
				if (sessionMap != null) {
					logger.info("In validating session map for SBI Response Action");
					sessionMap.put(Constants.TRANSACTION_COMPLETE_FLAG.getValue(), Constants.Y_FLAG.getValue());
					sessionMap.invalidate();
				}
				responseMap.remove(FieldType.HASH.getName());
				responseMap.remove(FieldType.TXN_KEY.getName());
				responseMap.remove(FieldType.ACQUIRER_TYPE.getName());
				responseMap.put(FieldType.IS_INTERNAL_REQUEST.getName(), "N");
				fields.put(FieldType.RESPONSE_MESSAGE.getName(), Status_desc);
				responseCreator.create(responseMap);
				responseCreator.ResponsePost(responseMap);
			}

		} catch (Exception exception) {
			logger.error("2- SbiResponseAction Exception", exception);
			return ERROR;
		}
		return Action.NONE;
	}

	public static String encodeString(String data) {
		return ESAPI.encoder().encodeForHTML(data);
	}
	/*
	 * public String execute() { try { Map<String, String[]> fieldMapObj =
	 * httpRequest.getParameterMap(); Map<String, String> requestMap = new
	 * HashMap<String, String>();
	 * 
	 * for (Entry<String, String[]> entry : fieldMapObj.entrySet()) { try {
	 * requestMap.put(entry.getKey(), ((String[]) entry.getValue())[0]);
	 * 
	 * } catch (ClassCastException classCastException) { logger.error("Exception",
	 * classCastException); } } // Log all entries from sessionMap if
	 * (!sessionMap.isEmpty()) { StringBuilder sb = new StringBuilder(); Iterator
	 * itr = sessionMap.entrySet().iterator(); while (itr.hasNext()) {
	 * 
	 * Map.Entry obj = (Entry) itr.next(); sb.append(obj.getKey() + " = " +
	 * obj.getValue() + " ~"); } logger.info("sessionMap values >>> " +
	 * sb.toString()); } else { logger.info("Session Map is empty"); }
	 * 
	 * Fields fields = new Fields(); Object fieldsObj = sessionMap.get("FIELDS"); if
	 * (null != fieldsObj) { fields.put((Fields) fieldsObj); }
	 * 
	 * String encdata = requestMap.get("encdata");
	 * logger.info("Encrypted Response received from SBI: " + encdata); String
	 * decrytedResponse = sbiUtil.decrypt(encdata);
	 * logger.info("decrypted Response received from SBI: " + decrytedResponse);
	 * String[] resparam = decrytedResponse.split("\\|"); Map<String, String>
	 * resParamMap = new HashMap<String, String>(); for (String param : resparam) {
	 * String[] parameterPair = param.split("="); if (parameterPair.length > 1) {
	 * resParamMap.put(parameterPair[0].trim(), parameterPair[1].trim()); } }
	 * //String receivedChecksum = resParamMap.get("checkSum");
	 * 
	 * // Check if fields is empty if
	 * (StringUtils.isBlank(fields.get(FieldType.PAY_ID.getName()))) {
	 * logger.info("FIELDS is blank in session Map, getting data from DB");
	 * 
	 * fields =
	 * fieldsDao.getPreviousForPgRefNum(resParamMap.get(FieldType.PG_REF_NUM.getName
	 * ())); String internalRequestFields =
	 * fields.get(FieldType.INTERNAL_REQUEST_FIELDS.getName()); String[] paramaters
	 * = internalRequestFields.split("~"); Map<String, String> paramMap = new
	 * HashMap<String, String>(); for (String param : paramaters) { String[]
	 * parameterPair = param.split("="); if (parameterPair.length > 1) {
	 * paramMap.put(parameterPair[0].trim(), parameterPair[1].trim()); } }
	 * fields.put(FieldType.RETURN_URL.getName(),
	 * paramMap.get(FieldType.RETURN_URL.getName()));
	 * sessionMap.put(FieldType.RETURN_URL.getName(),
	 * paramMap.get(FieldType.RETURN_URL.getName())); if
	 * (StringUtils.isNotBlank(paramMap.get(FieldType.INTERNAL_CUST_IP.getName())))
	 * { fields.put((FieldType.INTERNAL_CUST_IP.getName()),
	 * paramMap.get(FieldType.INTERNAL_CUST_IP.getName())); } if
	 * (StringUtils.isNotBlank(paramMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.
	 * getName()))) { fields.put((FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()),
	 * paramMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName())); } }
	 * 
	 * fields.put(FieldType.SBI_RESPONSE_FIELD.getName(), decrytedResponse);
	 * fields.logAllFields("Updated 3DS Recieved Map TxnType = " +
	 * fields.get(FieldType.TXNTYPE.getName()) + " " + "Txn id = " +
	 * fields.get(FieldType.TXN_ID.getName()));
	 * fields.put(FieldType.ACQUIRER_TYPE.getName(), AcquirerType.SBI.getCode());
	 * 
	 * if (StringUtils.isNotBlank((String)
	 * sessionMap.get(FieldType.INTERNAL_ORIG_TXN_TYPE.getName()))) {
	 * fields.put(FieldType.TXNTYPE.getName(), (String)
	 * sessionMap.get(FieldType.INTERNAL_ORIG_TXN_TYPE.getName())); } if
	 * (StringUtils.isNotBlank((String)
	 * sessionMap.get(FieldType.INTERNAL_CUST_IP.getName()))) {
	 * fields.put((FieldType.INTERNAL_CUST_IP.getName()), (String)
	 * sessionMap.get(FieldType.INTERNAL_CUST_IP.getName())); } if
	 * (StringUtils.isNotBlank((String)
	 * sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()))) {
	 * fields.put((FieldType.INTERNAL_CUST_COUNTRY_NAME.getName()), (String)
	 * sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName())); }
	 * 
	 * if (StringUtils.isNotBlank((String)
	 * sessionMap.get(FieldType.PAYMENTS_REGION.getName()))) {
	 * fields.put((FieldType.PAYMENTS_REGION.getName()), (String)
	 * sessionMap.get(FieldType.PAYMENTS_REGION.getName())); }
	 * 
	 * if (StringUtils.isNotBlank((String)
	 * sessionMap.get(FieldType.CARD_HOLDER_TYPE.getName()))) {
	 * fields.put((FieldType.CARD_HOLDER_TYPE.getName()), (String)
	 * sessionMap.get(FieldType.CARD_HOLDER_TYPE.getName())); }
	 * 
	 * if (StringUtils.isNotBlank((String) sessionMap.get(FieldType.OID.getName())))
	 * { fields.put((FieldType.OID.getName()), (String)
	 * sessionMap.get(FieldType.OID.getName()));
	 * 
	 * }
	 * 
	 * fields.put(FieldType.INTERNAL_VALIDATE_HASH_YN.getName(), "N");
	 * 
	 * Map<String, String> response =
	 * transactionControllerServiceProvider.transact(fields,
	 * Constants.TXN_WS_SBI_PROCESSOR.getValue()); responseMap = new
	 * Fields(response);
	 * 
	 * String pgFlag = (String)
	 * sessionMap.get(FieldType.INTERNAL_IRCTC_YN.getName()); if
	 * (StringUtils.isNotBlank(pgFlag)) {
	 * responseMap.put(FieldType.INTERNAL_IRCTC_YN.getName(), pgFlag); }
	 * 
	 * // Fetch user for retryTransaction ,SendEmailer and SmsSenser
	 * 
	 * User user =
	 * userDao.getUserClass(responseMap.get(FieldType.PAY_ID.getName()));
	 * 
	 * 
	 * // Retry Transaction Block Start if
	 * (!responseMap.get(FieldType.RESPONSE_CODE.getName()).equals(ErrorType.SUCCESS
	 * .getCode())) {
	 * 
	 * if (retryTransactionProcessor.retryTransaction(responseMap, sessionMap,
	 * user)) { addActionMessage(CrmFieldConstants.RETRY_TRANSACTION.getValue());
	 * sessionMap.remove(FieldType.SBI_FINAL_REQUEST.getName());
	 * sessionMap.remove(FieldType.SBI_RESPONSE_FIELD.getName());
	 * sessionMap.remove(FieldType.ACQUIRER_TYPE.getName());
	 * sessionMap.put(FieldType.RETRY_FLAG.getName(), "Y");
	 * responseMap.put(FieldType.RETRY_URL.getName(),
	 * PropertiesManager.propertiesMap.get(FieldType.RETRY_URL.getName()));
	 * responseCreator.ResponsePost(responseMap); return Action.NONE; }
	 * 
	 * }
	 * 
	 * 
	 * 
	 * Object previousFields = sessionMap.get(Constants.FIELDS.getValue()); Fields
	 * sessionFields = null; if (null != previousFields) { sessionFields = (Fields)
	 * previousFields; } else { // TODO: Handle } sessionFields.put(responseMap);
	 * 
	 * // Retry Transaction Block End // Sending Email for Transaction Status to
	 * merchant TODO...
	 * 
	 * String countryCode = (String)
	 * sessionMap.get(FieldType.INTERNAL_CUST_COUNTRY_NAME.getName());
	 * emailBuilder.postMan(responseMap, countryCode, user);
	 * 
	 * 
	 * Fields Fields = new Fields(); Fields.put(FieldType.ORDER_ID.getName(),
	 * fields.get(FieldType.ORDER_ID.getName()));
	 * Fields.put(FieldType.STATUS.getName(),
	 * fields.get(FieldType.STATUS.getName()));
	 * Fields.put(FieldType.MOP_TYPE.getName(),
	 * fields.get(FieldType.MOP_TYPE.getName()));
	 * 
	 * if (StringUtils.isNotBlank((String)
	 * sessionMap.get(FieldType.RETURN_URL.getName()))) {
	 * fields.put((FieldType.RETURN_URL.getName()), (String)
	 * sessionMap.get(FieldType.RETURN_URL.getName()));
	 * 
	 * }
	 * 
	 * String cardIssuerBank = (String)
	 * sessionMap.get(FieldType.INTERNAL_CARD_ISSUER_BANK.getName()); String
	 * cardIssuerCountry = (String)
	 * sessionMap.get(FieldType.INTERNAL_CARD_ISSUER_COUNTRY.getName()); if
	 * (StringUtils.isNotBlank(cardIssuerBank)) {
	 * responseMap.put(FieldType.CARD_ISSUER_BANK.getName(), cardIssuerBank); } if
	 * (StringUtils.isNotBlank(cardIssuerCountry)) {
	 * responseMap.put(FieldType.CARD_ISSUER_COUNTRY.getName(), cardIssuerCountry);
	 * }
	 * 
	 * responseMap.put(FieldType.INTERNAL_SHOPIFY_YN.getName(), (String)
	 * sessionMap.get(FieldType.INTERNAL_SHOPIFY_YN.getName()));
	 * responseMap.put(FieldType.IS_MERCHANT_HOSTED.getName(), (String)
	 * sessionMap.get(FieldType.IS_MERCHANT_HOSTED.getName())); if (sessionMap !=
	 * null) { logger.info("In validating session map for SBI Response Action");
	 * sessionMap.put(Constants.TRANSACTION_COMPLETE_FLAG.getValue(),
	 * Constants.Y_FLAG.getValue()); sessionMap.invalidate(); }
	 * responseMap.remove(FieldType.HASH.getName());
	 * responseMap.remove(FieldType.TXN_KEY.getName());
	 * responseMap.remove(FieldType.ACQUIRER_TYPE.getName());
	 * responseMap.put(FieldType.IS_INTERNAL_REQUEST.getName(), "N");
	 * responseCreator.create(responseMap);
	 * responseCreator.ResponsePost(responseMap);
	 * 
	 * } catch (Exception exception) { logger.error("Exception", exception); return
	 * ERROR; } return Action.NONE; }
	 */

}
